{"version":3,"file":"static/js/541.057313cd.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/section.module.scss?d3fd","components/Section/Section.jsx","webpack://react-homework-template/./src/components/Login/login.module.scss?7457","components/Login/Login.jsx","pages/LoginPage.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","webpack://react-homework-template/./src/pages/app.module.scss?9bd0"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"section_section__+6LE3\",\"title\":\"section_title__XzOLY\"};","import css from './section.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n    <section className={css.section}>\n        <h2 className={css.title}>{title}</h2>\n        {children}\n    </section>\n);\n    \nSection.propTypes = {\n    title: PropTypes.string,\n};\n\nexport default Section;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"login_form__BxgAM\",\"input\":\"login_input__IXs4x\",\"button\":\"login_button__ogX2Y\"};","import { useState } from 'react';\nimport shortid from 'shortid';\nimport css from './login.module.scss';\n\nexport default function Login({onSubmit}) {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    \n    const emailInputId = shortid.generate();\n    const passwordInputId = shortid.generate();\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n        switch (name) {\n        case 'email':\n            setEmail(value);\n            break;\n\n        case 'password':\n            setPassword(value);\n            break;\n\n        default:\n            break;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        onSubmit({ email, password });\n\n        setEmail('');\n        setPassword('');\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label htmlFor={emailInputId}>Email</label>\n        <input\n          className={css.input}\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n          id={emailInputId}\n          // className={css.input}\n          pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n          title=\"Email may contain only letters, one or more dots and @. For example abc@gmail.com\"\n          required\n        />\n        <label htmlFor={passwordInputId}>Password</label>\n        <input\n          className={css.input}\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          id={passwordInputId}\n          // className={css.input}\n          pattern=\".{6,}\"\n          title=\"Password must contain at least 6 characters\"\n          required\n        />\n        <button type=\"submit\" className={css.button}>\n          Sign in\n        </button>\n      </form>\n    );\n}","import { useDispatch } from \"react-redux\";\nimport { fetchLogin } from \"redux/auth/operations\";\n\nimport css from './app.module.scss';\n\nimport Login from \"components/Login\";\nimport Section from \"components/Section\";\n\nexport default function LoginPage() {\n    const dispatch = useDispatch();\n\n    const handleLogin = data => {\n        dispatch(fetchLogin(data));\n    }\n\n    return (\n      <main>\n        <h1 className={css.heading}>Do you have an account?</h1>\n        <div className={css.div}>\n          <Section title=\"Sign in\">\n            <Login onSubmit={handleLogin} />\n          </Section>\n        </div>\n      </main>\n    );\n}","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"app_div__GYaoV\",\"message\":\"app_message__OTDF6\",\"heading\":\"app_heading__LAi3b\",\"image\":\"app_image__oQyJV\"};"],"names":["title","children","className","css","Login","onSubmit","useState","email","setEmail","password","setPassword","emailInputId","shortid","passwordInputId","handleChange","target","name","value","e","preventDefault","htmlFor","type","onChange","id","pattern","required","LoginPage","dispatch","useDispatch","Section","data","fetchLogin","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","number","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}