{"version":3,"file":"static/js/62.26a8e635.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/section.module.scss?d3fd","components/Section/Section.jsx","webpack://react-homework-template/./src/components/Form/form.module.scss?1ee0","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.scss?8942","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/List/list.module.scss?2a47","components/List/List.jsx","redux/contacts/selectors.js","webpack://react-homework-template/./src/pages/app.module.scss?9bd0","pages/Contacts.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"section_section__+6LE3\",\"title\":\"section_title__XzOLY\"};","import css from './section.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n    <section className={css.section}>\n        <h2 className={css.title}>{title}</h2>\n        {children}\n    </section>\n);\n    \nSection.propTypes = {\n    title: PropTypes.string,\n};\n\nexport default Section;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"form_form__sP2jI\",\"input\":\"form_input__Hf2Sl\",\"button\":\"form_button__uA2lI\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport css from './form.module.scss';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        break;\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n    \n    setName('');\n    setNumber('');\n  };\n\n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label htmlFor={nameInputId}>\n          Name{' '}\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n            className={css.input}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId}>\n          Number{' '}\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            className={css.input}\n            id={numberInputId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className={css.button}\n        >\n          Add contact\n        </button>\n      </form>\n    );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__N-06B\"};","import css from './filter.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n    <label>\n        Find contacts by name {' '}\n        <input type=\"text\" value={value} onChange={onChange} className={css.filter} />\n    </label>\n)\n\nFilter.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"list_list__UTbzE\",\"item\":\"list_item__Srv+M\",\"button\":\"list_button__VAbQf\"};","import PropTypes from 'prop-types';\nimport css from './list.module.scss';\n\nconst List = ({ contacts, onDeleteContact }) => (\n  <ul className={css.list}>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={css.item}>\n        <p>\n          <span>👤</span>{' '}\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n          className={css.button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nList.propTypes = {\n    onDeleteContact: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n        })\n    ),\n};\n\nexport default List;\n","export const getFilter = ({filter}) => filter;\n\nexport const getContacts = ({ contacts, filter }) => {\n    const { items } = contacts;\n    if (!filter) return items;\n    const normalizedFilter = filter.toLowerCase();\n    \n    const result = items.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter),\n    );\n    return result;\n};","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"app_div__GYaoV\",\"message\":\"app_message__OTDF6\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport Section from 'components/Section';\nimport Form from 'components/Form';\nimport Filter from 'components/Filter';\nimport List from 'components/List';\n\nimport {\n  fetchContacts,\n  fetchAddContact,\n  fetchDeleteContact,\n} from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport css from './app.module.scss';\n\nexport function Home() {\n  const filteredContacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleAddContact = (name, number) => {\n    dispatch(fetchAddContact({ name, number }));\n  };\n\n  const handleDeleteContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const changeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const isBooks = Boolean(filteredContacts.length);\n\n  return (\n    <div className={css.div}>\n      <Section title=\"Phonebook\">\n        <Form onSubmit={handleAddContact} />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter value={filter} onChange={changeFilter} />\n        {isBooks ? (\n          <List\n            contacts={filteredContacts}\n            onDeleteContact={handleDeleteContact}\n          />\n        ) : (\n          <p className={css.message}>There are no contacts in the phonebook.</p>\n        )}\n      </Section>\n    </div>\n  );\n}\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["title","children","className","css","Form","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","numberInputId","handleChange","target","value","e","preventDefault","htmlFor","type","onChange","id","pattern","required","contacts","onDeleteContact","map","onClick","getFilter","filter","getContacts","items","normalizedFilter","toLowerCase","includes","Home","filteredContacts","useSelector","dispatch","useDispatch","useEffect","fetchContacts","isBooks","Boolean","length","fetchAddContact","setFilter","fetchDeleteContact","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}